function Class(o) {
  // Convert existed function to Class
  if (typeof o === 'function') {
    o.extends = Class.extends;
    return o;
  }
}

Class.extends = function (properties) {
  properties = properties || {};

  var parent = this;

  // 子类构造器函数
  function SubClass() {
    parent.apply(this, arguments);
    if (this.constructor === SubClass && this.__constructor) {
      this.__constructor.apply(this, arguments);
    }
  }

  // 子类继承父类static properties
  mix(SubClass, parent);

  // 子类继承父类原型链
  var proto = createProto(parent.prototype);
  proto.constructor = SubClass;
  SubClass.prototype = proto;
  SubClass.__super__ = parent.prototype;

  // 子类的原型对象中添加properties对象的显示属性
  mix(SubClass.prototype, properties);

  return SubClass;
};

function mix(r, s, wl) {
  // Copy "all" properties including inherited ones.
  for (var p in s) {
    if (s.hasOwnProperty(p)) {
      if (wl && indexOf(wl, p) === -1) continue

      // 在 iPhone 1 代等设备的 Safari 中，prototype 也会被枚举出来，需排除
      if (p !== 'prototype') {
        r[p] = s[p]
      }
    }
  }
}

function ctor () {}
var createProto = Object.__proto__ ?
  function (proto) {
    return {__proto__: proto};
  } : 
  function (proto) {
    ctor.prototype = proto;
    return new ctor();
  }

  /***
 * @author : joshinrai
 */

!(function(namespace){
  var isArray = Array.isArray;

  function EventEmitter() {
  }

  // By default EventEmitters will print a warning if more than
  // 10 listeners are added to it. This is a useful default which
  // helps finding memory leaks.
  //
  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  var defaultMaxListeners = 10;
  EventEmitter.prototype.setMaxListeners = function(n) {
    if (!this._events) this._events = {};
    this._maxListeners = n;
  };


  EventEmitter.prototype.emit = function() {
    var type = arguments[0];
    // If there is no 'error' event listener then throw.
    if (type === 'error') {
      if (!this._events || !this._events.error ||
          (isArray(this._events.error) && !this._events.error.length))
      {
        if (arguments[1] instanceof Error) {
          throw arguments[1]; // Unhandled 'error' event
        } else {
          throw new Error("Uncaught, unspecified 'error' event.");
        }
        return false;
      }
    }

    if (!this._events) return false;
    var handler = this._events[type];
    if (!handler) return false;

    if (typeof handler == 'function') {
      switch (arguments.length) {
        // fast cases
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        // slower
        default:
          var l = arguments.length;
          var args = new Array(l - 1);
          for (var i = 1; i < l; i++) args[i - 1] = arguments[i];
          handler.apply(this, args);
      }
      return true;

    } else if (isArray(handler)) {

      var l = arguments.length;
      var args = new Array(l - 1);
      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];

      var listeners = handler.slice();
      for (var i = 0, l = listeners.length; i < l; i++) {
        listeners[i].apply(this, args);
      }

      return true;

    } else {
      return false;
    }
  };

  EventEmitter.prototype.addListener = function(type, listener) {
    if ('function' !== typeof listener) {
      throw new Error('addListener only takes instances of Function');
    }

    if (!this._events) this._events = {};

    // To avoid recursion in the case that type == "newListeners"! Before
    // adding it to the listeners, first emit "newListeners".
    this.emit('newListener', type, typeof listener.listener === 'function' ?
              listener.listener : listener);

    if (!this._events[type]) {
      // Optimize the case of one listener. Don't need the extra array object.
      this._events[type] = listener;
    } else if (isArray(this._events[type])) {

      // If we've already got an array, just append.
      this._events[type].push(listener);

    } else {
      // Adding the second element, need to change to array.
      this._events[type] = [this._events[type], listener];

    }

    // Check for listener leak
    if (isArray(this._events[type]) && !this._events[type].warned) {
      var m;
      if (this._maxListeners !== undefined) {
        m = this._maxListeners;
      } else {
        m = defaultMaxListeners;
      }

      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('(node) warning: possible EventEmitter memory ' +
                      'leak detected. %d listeners added. ' +
                      'Use emitter.setMaxListeners() to increase limit.',
                      this._events[type].length);
        console.trace();
      }
    }

    return this;
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.once = function(type, listener) {
    if ('function' !== typeof listener) {
      throw new Error('.once only takes instances of Function');
    }

    var self = this;
    function g() {
      self.removeListener(type, g);
      listener.apply(this, arguments);
    };

    g.listener = listener;
    self.on(type, g);

    return this;
  };

  EventEmitter.prototype.removeListener = function(type, listener) {
    if ('function' !== typeof listener) {
      throw new Error('removeListener only takes instances of Function');
    }

    // does not use listeners(), so no side effect of creating _events[type]
    if (!this._events || !this._events[type]) return this;

    var list = this._events[type];

    if (isArray(list)) {
      var position = -1;
      for (var i = 0, length = list.length; i < length; i++) {
        if (list[i] === listener ||
            (list[i].listener && list[i].listener === listener))
        {
          position = i;
          break;
        }
      }

      if (position < 0) return this;
      list.splice(position, 1);
      if (list.length == 0)
        delete this._events[type];
    } else if (list === listener ||
               (list.listener && list.listener === listener))
    {
      delete this._events[type];
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function(type) {
    if (arguments.length === 0) {
      this._events = {};
      return this;
    }

    // does not use listeners(), so no side effect of creating _events[type]
    if (type && this._events && this._events[type]) this._events[type] = null;
    return this;
  };

  EventEmitter.prototype.listeners = function(type) {
    if (!this._events) this._events = {};
    if (!this._events[type]) this._events[type] = [];
    if (!isArray(this._events[type])) {
      this._events[type] = [this._events[type]];
    }
    return this._events[type];
  };

  namespace.Event = Class(EventEmitter);
  namespace.EventProxy = new Event();
})(window);

var View = Event.extends({
  /**
   * name 名字
   * @type {String}
   */
  name: 'View',
  /**
   * options 模块配置，一般包括tpl渲染需要用到的变量等
   * @type {Object}
   */
  options: {},
  /**
   * node 模块dom容器元素
   * @type {Jquery Object}
   */
  node: null,

  /**
   * __constructor 构造器方法，将传入options挂载到this.options
   * @param  {Object} options 对象
   */
  __constructor: function (options) {
    this.options = options;
  },
  /**
   * setNode 设置模块dom容器元素
   * @param {String} node Jquery selector style
   * eg '#id'、'.class'
   */
  setNode: function (node) {
    this.node = $(node);
  },
  /**
   * init 事件绑定等
   */
  init: function () {},
  /**
   * load 数据动态加载
   */
  load: function () {},
  /**
   * render 绘制，数据绘制到dom容器中
   */
  render: function () {},
  /**
   * destroy 事件销毁等
   */
  destroy: function () {}
});

var Com = View.extends({
  /*
   * name 显式定义声明组件的名称
   * @type {String}
   */
  name: 'Com',
  /*
   * options 组件配置项，一般包括tpl渲染需要用到的变量等，在 __constructor 构造函数中赋值
   * @type {Object}
   */
  options: {},
  /**
   * node 组件依附的dom节点元素
   * @type {Jquery Object}
   */
  node: null,
  /**
   * eventList 提前声明组件需要绑定的事件列表，否则不会被广播触发
   * eg ['evtname1', 'evtname2']
   * @type {Array}
   */
  eventList: [],
  /**
   * __constructor 重写view构造器，设置options及node，同时调用init()方法
   * @param  {Object} options 包含组件配置的对象
   * @param  {String} node    Jquery selector style
   */
  __constructor: function (options, node) {
    if (typeof options === 'string' && !node) {
      node = options;
      options = {};
    }
    Com.__super__.setNode.call(this, node);
    Com.__super__.__constructor.call(this, options);
    
    this.init();
  },
  init: function () {},
  load: function () {},
  render: function () {},
  destroy: function () {}
});

var Container = Com.extends({
  /*
   * name 显式定义声明容器的名称
   * @type {String}
   */
  name: 'Container',
  /*
   * options 容器配置项，一般包括tpl渲染需要用到的变量等，在 __constructor 构造函数中赋值
   * @type {Object}
   */
  options: {},
  /**
   * node 容器依附的dom节点元素
   * @type {Jquery Object}
   */
  node: null,
  __constructor: function (options, node) {
    /**
     * coms 组件实例对象集合，包含了container中被实例化的所有组件
     * @type {Object}
     */
    this.coms = {};
    Container.__super__.__constructor.call(this, options, node);
  },
  init: function () {},
  /**
   * factory 工厂，组件构造示例的方法
   * @param  {Function} constructor 函数类
   * @param  {Object} options 包含组件配置的对象
   * @param  {String} node    Jquery selector style
   */
  factory: function (constructor, options, node) {
    var self = this;
    // 配置扩展
    var options = $.extend(true, {}, options, this.options);
    // 构造
    var com = new constructor(options, node);
    // var eventList = com.eventList;
    // if (eventList && eventList.length > 0 && eventList.indexOf('__broadcast__') !== -1) {
    //   console.log('__broadcast__ event can not by set, it is belong to defalut');
    // }
    /**
     * 所有组件实例默认绑定__broadcast__事件
     * @param  {Object} args
     * {
     *   src: com1, // 触发广播事件的组件实例，为static属性
     *   evtname: 'evnet_name', // 广播的事件名称 
     *   data: ['a', 'b'], // 参数数组，包括广播事件触发时的所有参数 
     * }
     */
    // com.on('__broadcast__', function (args) {
    //   self.broadcast(args.evtname, args.data);
    // });
    return com;
  },
  /**
   * broadcast 广播方法，遍历组件示例的eventList，触发相应事件
   * @param  {String} evtname 被触发的事件名
   * @param  {Arguments} args    参数对象，包含被触发事件传递的所有参数
   */
  broadcast: function (evtname, args) {
    if (!evtname) {
      return console.log('evtname can not be empty');
    }
    var coms = this.coms;
    for (var key in coms) {
      var com = coms[key];
      var eventList = com.eventList;
      if (eventList && eventList.length > 0 && eventList.indexOf(evtname) !== -1) {
        com.emit.call(com, evtname, args);
      }
    }
  },
  destroy: function () {}
});
